
/* global Bun */

import { createClient }     from 'redis';
import { hashBulkToObject } from '../src/utils/hash-bulk.js';

const client = createClient({
	socket: {
		host: 'localhost',
		port: 49145,
	},
});

await client.connect();

const result = await client.sendCommand([ 'COMMAND', 'DOCS' ]);
const result_object = hashBulkToObject(result);

const COMMAND_REGEXP = /^[_a-z]+$/i;
async function createFile({
	path,
	typedef = [],
	class_name,
	is_async = false,
	returns,
}) {
	const lines = [];

	lines.push(
		'',
		`// Path: ${path}`,
		'// This file was automatically generated by tools/create-commands.js',
		'',
		...typedef,
		typedef.length > 0 ? '' : null,
		`export class ${class_name} {`,
		'\t#processCommand;',
		'',
		'\tconstructor(processCommand) {',
		'\t\tthis.#processCommand = processCommand;',
		'\t}',
		'',
	);

	for (const command of Object.keys(result_object).sort()) {
		const info = hashBulkToObject(
			result_object[command],
		);

		if (
			COMMAND_REGEXP.test(command) !== true
			|| command === 'discard'
			|| command === 'eval'
			|| command === 'multi'
			|| command === 'psubscribe'
			|| command === 'punsubscribe'
			|| command === 'subscribe'
			|| command === 'unsubscribe'
		) {
			continue;
		}

		const command_uppercase = command.toUpperCase();

		const command_lines = [
			'\t/**',
			`\t * ${info.summary}`,
			'\t *',
			`\t * Complexity: ${info.complexity}`,
			'\t *',
			`\t * Available since ${info.since}`,
			is_async ? '\t * @async' : null,
			'\t * @param {...(string | number)} args Command arguments.',
			`\t * @returns ${returns}`,
			'\t */',
		];

		lines.push(
			...command_lines,
			`\t${command_uppercase}(...args) {`,
			`\t\treturn this.#processCommand('${command_uppercase}', ...args);`,
			'\t}',
			'',
			...command_lines,
			`\t${command}(...args) {`,
			`\t\treturn this.#processCommand('${command}', ...args);`,
			'\t}',
		);
	}

	lines.push(
		'}',
		'',
	);

	await Bun.write(
		path,
		lines.filter((line) => typeof line === 'string').join('\n'),
	);
}

await createFile({
	path: 'src/client/commands.js',
	class_name: 'RedisClientCommands',
	is_async: true,
	returns: '{any} Response from the Redis server.',
});

await createFile({
	path: 'src/client/multi.commands.js',
	typedef: [
		'/**',
		' * @typedef {import(\'./multi.js\').RedisClientMulti} RedisClientMulti',
		' */',
	],
	class_name: 'RedisClientMultiCommands',
	returns: '{RedisClientMulti} RedisClientMulti instance.',
});

await client.disconnect();
